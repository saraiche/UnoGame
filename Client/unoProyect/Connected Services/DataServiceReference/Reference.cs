//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace unoProyect.DataServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataServiceReference.IDataService")]
    public interface IDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddImages", ReplyAction="http://tempuri.org/IDataService/AddImagesResponse")]
        bool AddImages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddImages", ReplyAction="http://tempuri.org/IDataService/AddImagesResponse")]
        System.Threading.Tasks.Task<bool> AddImagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddCredentials", ReplyAction="http://tempuri.org/IDataService/AddCredentialsResponse")]
        int AddCredentials(Logic.DataServiceReference.DTOCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/AddCredentials", ReplyAction="http://tempuri.org/IDataService/AddCredentialsResponse")]
        System.Threading.Tasks.Task<int> AddCredentialsAsync(Logic.DataServiceReference.DTOCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/IsUser", ReplyAction="http://tempuri.org/IDataService/IsUserResponse")]
        bool IsUser(Logic.DataServiceReference.DTOCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/IsUser", ReplyAction="http://tempuri.org/IDataService/IsUserResponse")]
        System.Threading.Tasks.Task<bool> IsUserAsync(Logic.DataServiceReference.DTOCredentials credentials);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataServiceChannel : unoProyect.DataServiceReference.IDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataServiceClient : System.ServiceModel.ClientBase<unoProyect.DataServiceReference.IDataService>, unoProyect.DataServiceReference.IDataService {
        
        public DataServiceClient() {
        }
        
        public DataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddImages() {
            return base.Channel.AddImages();
        }
        
        public System.Threading.Tasks.Task<bool> AddImagesAsync() {
            return base.Channel.AddImagesAsync();
        }
        
        public int AddCredentials(Logic.DataServiceReference.DTOCredentials credentials) {
            return base.Channel.AddCredentials(credentials);
        }
        
        public System.Threading.Tasks.Task<int> AddCredentialsAsync(Logic.DataServiceReference.DTOCredentials credentials) {
            return base.Channel.AddCredentialsAsync(credentials);
        }
        
        public bool IsUser(Logic.DataServiceReference.DTOCredentials credentials) {
            return base.Channel.IsUser(credentials);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserAsync(Logic.DataServiceReference.DTOCredentials credentials) {
            return base.Channel.IsUserAsync(credentials);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataServiceReference.IChatService")]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/ClientConnect", ReplyAction="http://tempuri.org/IChatService/ClientConnectResponse")]
        Logic.DataServiceReference.ChatUser ClientConnect(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/ClientConnect", ReplyAction="http://tempuri.org/IChatService/ClientConnectResponse")]
        System.Threading.Tasks.Task<Logic.DataServiceReference.ChatUser> ClientConnectAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetChatUsers", ReplyAction="http://tempuri.org/IChatService/GetChatUsersResponse")]
        Logic.DataServiceReference.ChatUser[] GetChatUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetChatUsers", ReplyAction="http://tempuri.org/IChatService/GetChatUsersResponse")]
        System.Threading.Tasks.Task<Logic.DataServiceReference.ChatUser[]> GetChatUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendNewMessage", ReplyAction="http://tempuri.org/IChatService/SendNewMessageResponse")]
        void SendNewMessage(Logic.DataServiceReference.ChatMessage chatMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendNewMessage", ReplyAction="http://tempuri.org/IChatService/SendNewMessageResponse")]
        System.Threading.Tasks.Task SendNewMessageAsync(Logic.DataServiceReference.ChatMessage chatMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/RemoveUser", ReplyAction="http://tempuri.org/IChatService/RemoveUserResponse")]
        void RemoveUser(Logic.DataServiceReference.ChatUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/RemoveUser", ReplyAction="http://tempuri.org/IChatService/RemoveUserResponse")]
        System.Threading.Tasks.Task RemoveUserAsync(Logic.DataServiceReference.ChatUser user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : unoProyect.DataServiceReference.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.ClientBase<unoProyect.DataServiceReference.IChatService>, unoProyect.DataServiceReference.IChatService {
        
        public ChatServiceClient() {
        }
        
        public ChatServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Logic.DataServiceReference.ChatUser ClientConnect(string username) {
            return base.Channel.ClientConnect(username);
        }
        
        public System.Threading.Tasks.Task<Logic.DataServiceReference.ChatUser> ClientConnectAsync(string username) {
            return base.Channel.ClientConnectAsync(username);
        }
        
        public Logic.DataServiceReference.ChatUser[] GetChatUsers() {
            return base.Channel.GetChatUsers();
        }
        
        public System.Threading.Tasks.Task<Logic.DataServiceReference.ChatUser[]> GetChatUsersAsync() {
            return base.Channel.GetChatUsersAsync();
        }
        
        public void SendNewMessage(Logic.DataServiceReference.ChatMessage chatMessage) {
            base.Channel.SendNewMessage(chatMessage);
        }
        
        public System.Threading.Tasks.Task SendNewMessageAsync(Logic.DataServiceReference.ChatMessage chatMessage) {
            return base.Channel.SendNewMessageAsync(chatMessage);
        }
        
        public void RemoveUser(Logic.DataServiceReference.ChatUser user) {
            base.Channel.RemoveUser(user);
        }
        
        public System.Threading.Tasks.Task RemoveUserAsync(Logic.DataServiceReference.ChatUser user) {
            return base.Channel.RemoveUserAsync(user);
        }
    }
}
